//////////////
10002,New York,24,15,17,16,11,10,9,4,24,36,40,32
99501,Alaska,14,24,36,40,27,16,15,34,15,10,9,32
20019,Washington,11,20,12,20,10,15,20,21,19,10,11,12
30381,Atlanta,25,26,23,20,21,22,21,21,20,19,18,11
27565,Oxford,6,7,11,14,9,8,14,15,9,9,10,11
85054,Phoenix,12,11,12,11,10,14,15,14,15,12,10,9
90080,Los Angeles,6,5,4,5,4,5,6,8,4,5,9,4
////////////////
 
 
/////////////
 
public class AnnualRainfall {
 
 
	private int cityPincode;
	private String cityName;
	private double averageAnnualRainfall;
 
	public int getCityPincode() {
		return cityPincode;
	}
 
	public void setCityPincode(int cityPincode) {
		this.cityPincode = cityPincode;
	}
 
	public String getCityName(){
		return cityName;
	}
 
	public void setCityName(String cityName){
		this.cityName = cityName;
	}
 
 
	public double getAverageAnnualRainfall(){
		return averageAnnualRainfall;
	}
 
 
	public void setAverageAnnualRainfall(double averageAnnualRainfall){
		this.averageAnnualRainfall = averageAnnualRainfall;
	}
 
	//Write the required business logic as expected in the question description
	public void calculateAverageAnnualRainfall (double monthlyRainfall [ ]){
 
		double averageRainFall = 0;
		for(int i = 0;i<monthlyRainfall.length;i++) {
			averageRainFall += monthlyRainfall[i];
		}
		averageRainFall /= 12;
		setAverageAnnualRainfall(averageRainFall);
	}
 
 
}
/////////////////////
 
//////////////////////////
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;
 
public class DBHandler {
 
	//Write the required business logic as expected in the question description
	public Connection establishConnection() {
 
		Connection con = null;
		Properties properties = new Properties();
		try {
			FileInputStream fr = new FileInputStream("db.properties");
			properties.load(fr);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
 
		String classname = properties.getProperty("db.classname");
		String url = properties.getProperty("db.url");
		String username = properties.getProperty("db.username");
		String password = properties.getProperty("db.password");
 
		try {
			Class.forName(classname);
			con= DriverManager.getConnection(url,username,password);
			System.out.println(con);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
 
		return con;
	}
}
///////////////////////////////////
 
////////////////////////
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;
 
public class DBHandler {
 
	//Write the required business logic as expected in the question description
	public Connection establishConnection() {
 
		Connection con = null;
		Properties properties = new Properties();
		try {
			FileInputStream fr = new FileInputStream("db.properties");
			properties.load(fr);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
 
		String classname = properties.getProperty("db.classname");
		String url = properties.getProperty("db.url");
		String username = properties.getProperty("db.username");
		String password = properties.getProperty("db.password");
 
		try {
			Class.forName(classname);
			con= DriverManager.getConnection(url,username,password);
			System.out.println(con);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
 
		return con;
	}
}
///////////////
 
///////////////
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;
 
public class DBHandler {
 
	//Write the required business logic as expected in the question description
	public Connection establishConnection() {
 
		Connection con = null;
		Properties properties = new Properties();
		try {
			FileInputStream fr = new FileInputStream("db.properties");
			properties.load(fr);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
 
		String classname = properties.getProperty("db.classname");
		String url = properties.getProperty("db.url");
		String username = properties.getProperty("db.username");
		String password = properties.getProperty("db.password");
 
		try {
			Class.forName(classname);
			con= DriverManager.getConnection(url,username,password);
			System.out.println(con);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
 
		return con;
	}
}
///////////////////////
 
////////////////////
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
 
public class RainfallReport {
 
	//Write the required business logic as expected in the question description
	public List<AnnualRainfall> generateRainfallReport(String filePath) {
 
		List<AnnualRainfall> objList = new ArrayList<>();
		BufferedReader br;
		File file = new File(filePath);
		try {
			br = new BufferedReader(new FileReader(file));
			String temp = br.readLine();
			while(temp != null) {
				String data[] = temp.split(",");
 
 
					if(validate(data[0])) {
						AnnualRainfall ar = new AnnualRainfall();
						ar.setCityPincode(Integer.parseInt(data[0]));
						ar.setCityName(data[1]);
						double monthlyRainfall [ ] = new double[data.length -2];
						for(int j=0;j<data.length-2;j++) {
							monthlyRainfall[j] = Double.parseDouble(data[j+2]);
						}
						ar.calculateAverageAnnualRainfall(monthlyRainfall);
						objList.add(ar);
					}
			temp = br.readLine();
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
 
			e.printStackTrace();
		}  catch (InvalidCityPincodeException e) {
 
			e.getMessage();
		}
 
		return objList;
	}
 
	public List<AnnualRainfall>  findMaximumRainfallCities() throws SQLException {
 
		List<AnnualRainfall> objListMax = new ArrayList<>();
 
		DBHandler db = new DBHandler();
		Connection mycon = db.establishConnection();
		Statement stm = mycon.createStatement();
		String query = new String("select max(average_annual_rainfall) from AnnualRainfall");
		ResultSet rs = stm.executeQuery(query);
		double maxRainfall = 0;
		if(rs.next()) {
			maxRainfall = rs.getDouble(1);
		}
		query = "select * from AnnualRainfall where average_anual_rainfall = "+maxRainfall;
		rs = stm.executeQuery(query);
 
		while(rs.next()) {
			AnnualRainfall ar = new AnnualRainfall();
			ar.setCityPincode(rs.getInt(1));
			ar.setCityName(rs.getString(2));
			ar.setAverageAnnualRainfall(rs.getDouble(3));
			objListMax.add(ar);
		}
		return objListMax;
 
	}
 
 
	public boolean validate(String cityPincode) throws InvalidCityPincodeException {
 
		char pin[] = cityPincode.toCharArray();
 
		if(pin.length != 5) {
			throw new InvalidCityPincodeException("Invalid City Pincode");
		}else {
			try {
				Integer.parseInt(cityPincode);			
				}catch(Exception e) {
					throw new InvalidCityPincodeException("Invalid City Pincode");
				}
		}
 
		return true;	
	}
 
}
///////////////////////////